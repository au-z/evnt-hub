{"version":3,"sources":["webpack://EventHub/webpack/universalModuleDefinition","webpack://EventHub/webpack/bootstrap","webpack://EventHub/./src/EventHub.ts","webpack://EventHub/./src/Hub.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","verbose","targetWindow","options","VERBOSE","targetOrigin","hubId","console","warn","originRegex","hub","nextTickFn","eventMap","subUid","subscribe","event","func","correlationId","token","toString","push","log","publish","payload","setTimeout","subscribers","idx","length","correlates","unsubscribe","found","values","forEach","subscriptions","findIndex","splice","nextTick","cb","Hub","isOriginValid","origin","exec","subscribeOnce","type","Error","sub","meta","post","postMessage","_meta","version","error","emit","addEventListener","originalEvent","data","_type","about","request","reqEvent","resEvent","reqBody","requesting","Promise","res","rej","e","requestOnce"],"mappings":"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","file":"EventHub.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"EventHub\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EventHub\"] = factory();\n\telse\n\t\troot[\"EventHub\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","import packageJson from '../package.json';\r\nimport Hub from './Hub';\r\n/**\r\n * Creates an event hub for pub/sub interactions and\r\n * window.postMessage communication for linking clients.\r\n * @param {Object} options configuration options for the hub\r\n * @return {Object} the public API of the EventHub library\r\n */\r\nexport default (function (options = { verbose: false }) {\r\n    const targetWindow = options.targetWindow || null;\r\n    const VERBOSE = options.verbose;\r\n    let targetOrigin = options.targetOrigin || null;\r\n    let hubId = options.hubId || null;\r\n    if (!targetOrigin && VERBOSE) {\r\n        console.warn('[EventHub] Cannot postMessage without a targetOrigin. Please add it to \\'_init_\\' event payload.');\r\n    }\r\n    if (!options.originRegex) {\r\n        console.warn('[EventHub] No originRegex provided. Incoming messages will not be checked.');\r\n    }\r\n    const hub = Hub(VERBOSE);\r\n    hub.subscribe('_init_', (type, payload = {}, meta) => {\r\n        hubId = payload.hubId.toString();\r\n        targetOrigin = (payload.targetOrigin) ? payload.targetOrigin : targetOrigin;\r\n        if (!targetOrigin) {\r\n            console.error('[EventHub] No target origin supplied. Cannot postMessage.');\r\n        }\r\n    });\r\n    /**\r\n     * Returns true if the origin matches the regex or if there is no originRegex configured.\r\n     * @param {String} origin the origin of the event\r\n     * @return {Boolean}\r\n     */\r\n    function isOriginValid(origin) {\r\n        if (!options.originRegex) {\r\n            return true;\r\n        }\r\n        return !!options.originRegex.exec(origin);\r\n    }\r\n    /**\r\n     * A regular subscription that only resolves if a matching correlationId is published.\r\n     * The subscription is then cancelled.\r\n     * @param type the subscription name\r\n     * @param func the function to invoke\r\n     * @param correlationId a unique token to correlate sent and received events\r\n     */\r\n    function subscribeOnce(type, func, correlationId) {\r\n        if (correlationId == null || correlationId === '') {\r\n            throw new Error('[EventHub] cannot subscribeOnce if no correlationId is provided');\r\n        }\r\n        let sub = hub.subscribe(type, (type, payload, meta) => {\r\n            if (meta.correlates) {\r\n                hub.unsubscribe(sub);\r\n                func(type, payload, meta);\r\n            }\r\n        }, correlationId);\r\n        return sub;\r\n    }\r\n    /**\r\n     * Sends a window.postMessage to the targetOrigin\r\n     * @param {string} type the type of postMessage\r\n     * @param {any} payload the postMessage payload\r\n     * @param {Window} window the window to postMessage to (fallback: options.targetWindow)\r\n     * @param {String} correlationId a unique token to correlate sent and received events\r\n     */\r\n    function post(type, payload = {}, window, correlationId) {\r\n        // use the targetWindow as a fallback\r\n        window = window || targetWindow;\r\n        VERBOSE && console.log(`Attempting to postMessage '${type}' to targetOrigin ${targetOrigin}. Payload: `, payload);\r\n        if (window) {\r\n            if (!hubId)\r\n                console.warn('[EventHub] has no hubId.');\r\n            targetOrigin && window.postMessage({ type, payload, _meta: {\r\n                    hubId,\r\n                    correlationId,\r\n                    version: packageJson.version,\r\n                } }, targetOrigin);\r\n        }\r\n        else {\r\n            console.error('[EventHub] cannot postMessage to falsy window.');\r\n        }\r\n    }\r\n    /**\r\n     * Publishes the event to the local hub AND sends a window.postMessage to the targetOrigin\r\n     * @param {string} type the event name and type of postMessage\r\n     * @param {any} payload the event and postMessage payload\r\n     * @param {Window} window the window to postMessage to\r\n     * @param {String} correlationId a unique token to correlate sent and received events\r\n     */\r\n    function emit(type, payload = {}, window, correlationId) {\r\n        hub.publish(type, payload, correlationId);\r\n        post(type, payload, window, correlationId);\r\n    }\r\n    /**\r\n     * Returns a promise that resolves whenever the supplied event is received in response.\r\n     * @param reqEvent the event to request\r\n     * @param resEvent the event to resolve from\r\n     * @param reqBody the request event payload\r\n     * @param correlationId a unique token to correlate sent and received events\r\n     */\r\n    function request(reqEvent, resEvent, reqBody = {}, correlationId) {\r\n        var requesting = new Promise((res, rej) => hub.subscribe(resEvent, (e, payload, _meta) => {\r\n            res({ value: payload, _meta });\r\n        }, correlationId));\r\n        emit(reqEvent, reqBody, null, correlationId);\r\n        return requesting;\r\n    }\r\n    /**\r\n     * Returns a promise that resolves once if and only if a response event with matching correlationId is received.\r\n     * @param reqEvent the event to request\r\n     * @param resEvent the event to resolve from\r\n     * @param reqBody the request event payload\r\n     * @param correlationId a unique token to correlate sent and received events\r\n     */\r\n    function requestOnce(reqEvent, resEvent, reqBody = {}, correlationId) {\r\n        var requesting = new Promise((res, rej) => subscribeOnce(resEvent, (e, payload, _meta) => {\r\n            res({ value: payload, _meta });\r\n        }, correlationId));\r\n        // postMessage AND publish to stay handler origin agnostic\r\n        emit(reqEvent, reqBody, null, correlationId);\r\n        return requesting;\r\n    }\r\n    window.addEventListener('message', (event) => {\r\n        let origin = event.origin || (event.originalEvent && event.originalEvent.origin);\r\n        let ok = isOriginValid(origin);\r\n        if (!ok) {\r\n            console.warn('[EventHub] message received from unknown origin. Ignoring.');\r\n            return;\r\n        }\r\n        if (!event.data || !event.data.type || !event.data.payload)\r\n            return;\r\n        VERBOSE && console.log(`PostMessage event '${event.data._type}' received from ${origin}. Publishing.`);\r\n        hub.publish(event.data.type, event.data.payload, (event.data._meta) ? event.data._meta.correlationId : null);\r\n    });\r\n    return {\r\n        about: () => ({\r\n            hubId,\r\n            originRegex: options.originRegex,\r\n            targetOrigin,\r\n            targetWindow,\r\n            verbose: VERBOSE,\r\n            version: packageJson.version,\r\n        }),\r\n        nextTick: hub.nextTick,\r\n        publish: hub.publish,\r\n        subscribe: hub.subscribe,\r\n        subscribeOnce,\r\n        unsubscribe: hub.unsubscribe,\r\n        isOriginValid,\r\n        post,\r\n        emit,\r\n        request,\r\n        requestOnce,\r\n    };\r\n});\r\n","/**\r\n * Creates a simple pub sub object to which an application can subscribe, publish, and unsubscribe.\r\n * @param {boolean} options hub options\r\n * @return {Object} the basic hub api\r\n */\r\nexport default function Hub(verbose) {\r\n    const VERBOSE = verbose;\r\n    let nextTickFn = () => { };\r\n    let eventMap = {};\r\n    let subUid = -1;\r\n    /**\r\n     * Subscribe to an event in the hub\r\n     * @param {String} event the event being listened for\r\n     * @param {Function} func the function to execute on publish\r\n     * @param {String} correlationId a unique token to correlate sent and received events\r\n     * @return {String} a token identifying the subscription\r\n     */\r\n    function subscribe(event, func = () => { }, correlationId = null) {\r\n        if (!eventMap[event])\r\n            eventMap[event] = [];\r\n        let token = (++subUid).toString();\r\n        eventMap[event].push({ token, func, options: { correlationId } });\r\n        VERBOSE && console.log(`Subscription to '${event}' added. Returning token: ${token}.`);\r\n        return token;\r\n    }\r\n    /**\r\n     * Publishes an event to the hub\r\n     * @param {String} event the event being published\r\n     * @param {String} payload any data associated with the event\r\n     * @param {String} correlationId a unique token to correlate sent and received events\r\n     * @return {Boolean} if the publish was successfull\r\n     */\r\n    function publish(event, payload, correlationId) {\r\n        VERBOSE && console.log(`Event '${event}' published. Payload: `, payload);\r\n        if (!eventMap[event])\r\n            return false;\r\n        setTimeout(() => {\r\n            const subscribers = eventMap[event];\r\n            let idx = subscribers.length;\r\n            while (idx--) {\r\n                subscribers[idx].func(event, payload, {\r\n                    correlationId: correlationId,\r\n                    correlates: correlationId === subscribers[idx].options.correlationId,\r\n                });\r\n            }\r\n            nextTickFn();\r\n        }, 0);\r\n        return true;\r\n    }\r\n    /**\r\n     * Unsubscribes from eventMap published to the hub with the matching token\r\n     * @param {String} token the subscription identifier issued on subscribe\r\n     * @return {Number} the token if successful else false\r\n     */\r\n    function unsubscribe(token) {\r\n        let found = false;\r\n        Object.values(eventMap).forEach((subscriptions) => {\r\n            const idx = subscriptions.findIndex((s) => s.token === token);\r\n            if (idx > -1) {\r\n                subscriptions.splice(idx, 1);\r\n                found = true;\r\n            }\r\n        });\r\n        return found ? token : false;\r\n    }\r\n    /**\r\n     * Registers a function to be run after all subscription funcs are called\r\n     * @param {Function} cb the callback function to execute\r\n     */\r\n    function nextTick(cb) {\r\n        nextTickFn = cb;\r\n    }\r\n    return {\r\n        subscribe,\r\n        publish,\r\n        unsubscribe,\r\n        nextTick,\r\n    };\r\n}\r\n;\r\n"],"sourceRoot":""}