{"version":3,"sources":["webpack://EventHub/webpack/universalModuleDefinition","webpack://EventHub/webpack/bootstrap","webpack://EventHub/./src/EventHub.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;AClFA;AAAA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACgB,oFAAqB,iBAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,SAAS;AAC5B,oBAAoB,OAAO;AAC3B;AACA,sDAAsD,EAAE;AACxD;AACA;AACA;AACA,kCAAkC,cAAc;AAChD,uDAAuD,MAAM,4BAA4B,MAAM;AAC/F;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,oBAAoB,QAAQ;AAC5B;AACA;AACA,4CAA4C,MAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,iBAAiB,iBAAiB,OAAO;AAC7F;AACA,KAAK;AACL;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,IAAI;AACnB,eAAe,OAAO;AACtB;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,IAAI;AACnB,eAAe,OAAO;AACtB;AACA,oCAAoC;AACpC;AACA;AACA,4DAA4D,KAAK,mBAAmB,aAAa;AACjG;AACA;AACA;AACA;AACA;AACA,gDAAgD,gBAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE","file":"EventHub.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"EventHub\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EventHub\"] = factory();\n\telse\n\t\troot[\"EventHub\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const isObj = (a) => (a === Object(a) && Object.prototype.toString.call(a) !== '[object Array]');\r\n/**\r\n * Creates an event hub for pub/sub interactions and\r\n * window.postMessage communication for linking clients.\r\n * @param {Object} options configuration options for the hub\r\n * @return {Object} the public API of the EventHub library\r\n */\r\nexport default (function (options = { verbose: false }) {\r\n    const targetWindow = options.targetWindow || null;\r\n    const VERBOSE = options.verbose;\r\n    let targetOrigin = options.targetOrigin || null;\r\n    let hubId = options.hubId || null;\r\n    if (!targetOrigin && VERBOSE) {\r\n        console.warn('[EventHub] Cannot postMessage without a targetOrigin. Please add it to \\'_init_\\' event payload.');\r\n    }\r\n    if (!options.originRegex) {\r\n        console.warn('[EventHub] No originRegex provided. Incoming messages will not be checked.');\r\n    }\r\n    let nextTickFn = function () { };\r\n    const hub = (function () {\r\n        let eventMap = {};\r\n        let subUid = -1;\r\n        /**\r\n         * Subscribe to an event in the hub\r\n         * @param {String} event the event being listened for\r\n         * @param {Function} func the function to execute on publish\r\n         * @return {String} a token identifying the subscription\r\n         */\r\n        function subscribe(event, func = function () { }) {\r\n            if (!eventMap[event])\r\n                eventMap[event] = [];\r\n            let token = (++subUid).toString();\r\n            eventMap[event].push({ token, func });\r\n            VERBOSE && console.log(`Subscription to '${event}' added. Returning token: ${token}.`);\r\n            return token;\r\n        }\r\n        /**\r\n         * Publishes an event to the hub\r\n         * @param {String} event the event being published\r\n         * @param {String} payload any data associated with the event\r\n         * @return {Boolean} if the publish was successfull\r\n         */\r\n        function publish(event, payload) {\r\n            VERBOSE && console.log(`Event ${event} published. Payload: `, payload);\r\n            if (!eventMap[event])\r\n                return false;\r\n            setTimeout(() => {\r\n                const subscribers = eventMap[event];\r\n                let idx = subscribers.length;\r\n                while (idx--) {\r\n                    subscribers[idx].func(event, payload);\r\n                }\r\n                nextTickFn();\r\n            }, 0);\r\n            return true;\r\n        }\r\n        /**\r\n         * Unsubscribes from eventMap published to the hub with the matching token\r\n         * @param {String} token the subscription identifier issued on subscribe\r\n         * @return {Number} the token if successful else false\r\n         */\r\n        function unsubscribe(token) {\r\n            let found = false;\r\n            Object.values(eventMap).forEach((subscriptions) => {\r\n                const idx = subscriptions.findIndex((s) => s.token === token);\r\n                if (idx > -1) {\r\n                    subscriptions.splice(idx, 1);\r\n                    found = true;\r\n                }\r\n            });\r\n            return found ? token : false;\r\n        }\r\n        return {\r\n            subscribe,\r\n            publish,\r\n            unsubscribe\r\n        };\r\n    })();\r\n    hub.subscribe('_init_', (type, payload = {}) => {\r\n        hubId = payload.hubId.toString();\r\n        targetOrigin = (payload.targetOrigin) ? payload.targetOrigin : targetOrigin;\r\n        if (!targetOrigin) {\r\n            console.error('[EventHub] No target origin supplied. Cannot postMessage.');\r\n        }\r\n    });\r\n    window.addEventListener('message', (event) => {\r\n        let origin = event.origin || event.originalEvent.origin;\r\n        let ok = isOriginValid(origin);\r\n        if (!ok) {\r\n            console.warn('[EventHub] message received from unknown origin. Ignoring.');\r\n            return;\r\n        }\r\n        if (!event.data || !event.data._type || !event.data.payload)\r\n            return;\r\n        VERBOSE && console.log(`PostMessage event ${event.data._type} received from ${origin}. Publishing.`);\r\n        hub.publish(event.data._type, event.data.payload);\r\n    });\r\n    /**\r\n     * Returns true if the origin matches the regex or if there is no originRegex configured.\r\n     * @param {String} origin the origin of the event\r\n     * @return {Boolean}\r\n     */\r\n    function isOriginValid(origin) {\r\n        if (!options.originRegex) {\r\n            return true;\r\n        }\r\n        return !!options.originRegex.exec(origin);\r\n    }\r\n    /**\r\n     * Publishes the event and sends a window.postMessage to the targetOrigin\r\n     * @param {string} type the event name and type of postMessage\r\n     * @param {any} payload the event and postMessage payload\r\n     * @param {Window} window the window to postMessage to\r\n     */\r\n    function emit(type, payload = {}, window) {\r\n        hub.publish(type, payload);\r\n        post(type, payload, window);\r\n    }\r\n    /**\r\n     * Sends a window.postMessage to the targetOrigin\r\n     * @param {string} type the type of postMessage\r\n     * @param {any} payload the postMessage payload\r\n     * @param {Window} window the window to postMessage to (fallback: options.targetWindow)\r\n     */\r\n    function post(type, payload = {}, window) {\r\n        // use the targetWindow as a fallback\r\n        window = window || targetWindow;\r\n        VERBOSE && console.log(`Attempting to postMessage ${type} to targetOrigin ${targetOrigin}. Payload: `, payload);\r\n        if (window) {\r\n            if (!hubId)\r\n                console.warn('[EventHub] has no hubId.');\r\n            if (isObj)\r\n                payload._hubId = hubId;\r\n            targetOrigin && window.postMessage({ type, payload }, targetOrigin);\r\n        }\r\n        else {\r\n            console.error('[EventHub] cannot postMessage to falsy window.');\r\n        }\r\n    }\r\n    /**\r\n     * Registers a function to be run after all subscription funcs are called\r\n     * @param {Function} cb the callback function to execute\r\n     */\r\n    function nextTick(cb) {\r\n        nextTickFn = cb;\r\n    }\r\n    return {\r\n        about: () => ({\r\n            hubId,\r\n            originRegex: options.originRegex,\r\n            targetOrigin,\r\n            targetWindow,\r\n            verbose: VERBOSE,\r\n            version: '2.0.0',\r\n        }),\r\n        emit,\r\n        post,\r\n        publish: hub.publish,\r\n        subscribe: hub.subscribe,\r\n        unsubscribe: hub.unsubscribe,\r\n        isOriginValid,\r\n        nextTick,\r\n    };\r\n});\r\n"],"sourceRoot":""}