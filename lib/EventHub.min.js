!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("EventHub",[],t):"object"==typeof exports?exports.EventHub=t():e.EventHub=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e){e.exports=JSON.parse('{"name":"evnt-hub","version":"2.1.1","description":"Event subscription library with window.postMessage support.","main":"index.js","scripts":{"build":"webpack --mode production","dev":"webpack --mode development --progress --colors --watch","dev:demo":"concurrently \\"npm run dev\\" \\"node server.js\\"","test":"jest","test:watch":"jest --watch","prepublishOnly":"concurrently \\"webpack --env build\\" \\"webpack --env dev\\" \\"npm run test\\""},"repository":{"type":"git","url":"git+https://github.com/auzmartist/event-hub.git"},"keywords":["events","pub","sub","postMessage"],"author":"Austin Martin","license":"ISC","bugs":{"url":"https://github.com/auzmartist/event-hub/issues"},"homepage":"https://github.com/auzmartist/event-hub#readme","publishConfig":{"registry":"https://registry.npmjs.org/"},"devDependencies":{"@babel/cli":"^7.6.2","@babel/core":"^7.6.2","@babel/plugin-proposal-class-properties":"^7.5.5","@babel/plugin-proposal-object-rest-spread":"^7.6.2","@babel/preset-env":"^7.6.2","@babel/preset-typescript":"^7.6.0","@babel/register":"^7.6.2","babel-eslint":"^10.0.3","babel-jest":"^24.9.0","babel-loader":"^8.0.6","babel-polyfill":"^6.26.0","concurrently":"^3.6.1","cross-env":"^4.0.0","eslint":"^5.16.0","eslint-config-auz":"^1.0.0","eslint-loader":"^2.2.1","express":"^4.17.1","jest":"^24.9.0","ts-loader":"^5.4.5","typescript":"^3.6.3","vue":"^2.6.10","webpack":"^4.40.2","webpack-cli":"^3.3.9","yargs":"^13.3.0"},"jest":{"transform":{"^.+\\\\.tsx?$":"babel-jest","^.+\\\\.js$":"babel-jest"},"transformIgnorePatterns":["node_modules"]}}')},function(e,t,n){"use strict";n.r(t);var r=n(0);t.default=function(e={verbose:!1}){const t=e.targetWindow||null,n=e.verbose;let o=e.targetOrigin||null,i=e.hubId||null;!o&&n&&console.warn("[EventHub] Cannot postMessage without a targetOrigin. Please add it to '_init_' event payload."),e.originRegex||console.warn("[EventHub] No originRegex provided. Incoming messages will not be checked.");const s=function(e){const t=e;let n=()=>{},r={},o=-1;return{subscribe:function(e,n=(()=>{}),i=null){r[e]||(r[e]=[]);let s=(++o).toString();return r[e].push({token:s,func:n,options:{correlationId:i}}),t&&console.log(`Subscription to '${e}' added. Returning token: ${s}.`),s},publish:function(e,o,i){return t&&console.log(`Event '${e}' published. Payload: `,o),!!r[e]&&(setTimeout(()=>{const t=r[e];let s=t.length;for(;s--;)t[s].func(e,o,{correlationId:i,correlates:i===t[s].options.correlationId});n()},0),!0)},unsubscribe:function(e){let t=!1;return Object.values(r).forEach(n=>{const r=n.findIndex(t=>t.token===e);r>-1&&(n.splice(r,1),t=!0)}),!!t&&e},nextTick:function(e){n=e}}}(n);function u(t){return!e.originRegex||!!e.originRegex.exec(t)}function a(e,t,n){if(null==n||""===n)throw new Error("[EventHub] cannot subscribeOnce if no correlationId is provided");let r=s.subscribe(e,(e,n,o)=>{o.correlates&&(s.unsubscribe(r),t(e,n,o))},n);return r}function l(e,s={},u,a){u=u||t,n&&console.log(`Attempting to postMessage '${e}' to targetOrigin ${o}. Payload: `,s),u?(i||console.warn("[EventHub] has no hubId."),o&&u.postMessage({type:e,payload:s,_meta:{hubId:i,correlationId:a,version:r.version}},o)):console.error("[EventHub] cannot postMessage to falsy window.")}function c(e,t={},n,r){s.publish(e,t,r),l(e,t,n,r)}return s.subscribe("_init_",(e,t={},n)=>{i=t.hubId.toString(),(o=t.targetOrigin?t.targetOrigin:o)||console.error("[EventHub] No target origin supplied. Cannot postMessage.")}),window.addEventListener("message",e=>{let t=e.origin||e.originalEvent&&e.originalEvent.origin;u(t)?e.data&&e.data.type&&e.data.payload&&(n&&console.log(`PostMessage event '${e.data._type}' received from ${t}. Publishing.`),s.publish(e.data.type,e.data.payload,e.data._meta?e.data._meta.correlationId:null)):console.warn("[EventHub] message received from unknown origin. Ignoring.")}),{about:()=>({hubId:i,originRegex:e.originRegex,targetOrigin:o,targetWindow:t,verbose:n,version:r.version}),nextTick:s.nextTick,publish:s.publish,subscribe:s.subscribe,subscribeOnce:a,unsubscribe:s.unsubscribe,isOriginValid:u,post:l,emit:c,request:function(e,t,n={},r){var o=new Promise((e,n)=>s.subscribe(t,(t,n,r)=>{e({value:n,_meta:r})},r));return c(e,n,null,r),o},requestOnce:function(e,t,n={},r){var o=new Promise((e,n)=>a(t,(t,n,r)=>{e({value:n,_meta:r})},r));return c(e,n,null,r),o}}}}]).default}));
//# sourceMappingURL=EventHub.min.js.map